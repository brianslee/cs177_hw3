Brian Lee
3620101

dictionary_decrypt.py - Dictionary attack used to crack targaryend account. Outputs hash file. Use ctrl+f to find proper hash. Successful.
permute.c - outputs file holding permutations of usernames. Currently set to arya_stark's username. Successfully finds all 3628800 permutations
permuteDecrypt.py - Dictionary attack using permuations of usernames creted by permute.c. Attempted to crack arya_stark.
bruteForce.py - Brute force attack using itertools.product() on tyrion_lannister. Successful

Detailed explanation (also on printed homework):
The first password I managed to crack was Daenerys Targaryen's account, and the process I used was a dictionary attack using the word.txt file provided. I created programs in both python and C to do this, and, on their own, both of them failed. The process I used was simple. Go through the txt file one line at a time, use the target account's salt to encrypt it using the same crypt function that was in the example, and comparing the resulting hash with the target account's hash. If the hashes are the same, then we have our password. The problem was, this didn't work out as planned as no password was found, according to my program. So, I had the python version create an output file holding every single has for each word for the given salt. That took about 30 minutes. Once I had this output file, testing it on the Daenerys account information, I found that there was a match between her hash and a hash in the resulting file, on line 275943, by ctrl+f-ing her hash in the output file. The corresponding word in the word.txt file was overargumentative. I tried to log onto her account using the word as the password, and successfully gained entry.
The next password I attempted to crack was the Tyrion Lannister account. It was clear that this would be a brute force attack, due to the nature of his hash. His was the standard provided by the crypt function, which meant it was a DES hash with a two character salt of Za. Unfortunately, I was unable to figure out what his password was due to a combination of factors. Namely, my method of password checking with both included checking in the fuction (which has proven itself finicky with the Targaryen account) and an output txt file. However, I apparently ran out of memory before the algorithm could reach completion on both CSIL and my virtual machine. So, I decided to move on to another account.
I came across information that led me to believe that the arya_stark account's password was a permutation of the username. So, I created a c program that would generate permutations of her name and put it in a dictionary file. Then, I ran another dictionary attack on it. On all 3,268,800 possible passwords. And I'm certain some of those are duplicates as the letter a repeats 3 times. While the permutation program took mere seconds to complete, the decryption takes over 7 hours. But, in the end, I failed to find the password.
Finally, I came across documentation about a python function called itertools.product() that would make a brute force attack simpler. So, I decided to use it to take one more crack at Tyrion's password. I left my code running overnight, but I managed to find the password in the end. The code ran for well over an hour, something that was likely due to the fact that I had included uppercase letters where none was required. Regardless, brute force was a success.
